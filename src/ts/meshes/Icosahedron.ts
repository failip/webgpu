import {Mesh} from './Mesh';

export class Icosahedron implements Mesh {
    readonly vertexSize = 4 * 10; // Byte size of one cube vertex.
    readonly positionOffset = 0;
    readonly colorOffset = 4 * 4; // Byte offset of cube vertex color attribute.
    readonly UVOffset = 4 * 8;
    readonly vertexCount = 36;
    readonly vertexArray : Float32Array;
    constructor() {
        const X :number= 0.525731112119133606;
        const Z :number= 0.850650808352039932;
        const N :number = 0.0;
        this.vertexArray = new Float32Array([
            1, -1, 1, 1, 1, 0, 1, 1, 1, 1,
            -1, -1, 1, 1, 0, 0, 1, 1, 0, 1,
            -1, -1, -1, 1, 0, 0, 0, 1, 0, 0,
            1, -1, -1, 1, 1, 0, 0, 1, 1, 0,
            1, -1, 1, 1, 1, 0, 1, 1, 1, 1,
            -1, -1, -1, 1, 0, 0, 0, 1, 0, 0,
        
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, -1, 1, 1, 1, 0, 1, 1, 0, 1,
            1, -1, -1, 1, 1, 0, 0, 1, 0, 0,
            1, 1, -1, 1, 1, 1, 0, 1, 1, 0,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, -1, -1, 1, 1, 0, 0, 1, 0, 0,
        
            -1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
            1, 1, -1, 1, 1, 1, 0, 1, 0, 0,
            -1, 1, -1, 1, 0, 1, 0, 1, 1, 0,
            -1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
            1, 1, -1, 1, 1, 1, 0, 1, 0, 0,
        
            -1, -1, 1, 1, 0, 0, 1, 1, 1, 1,
            -1, 1, 1, 1, 0, 1, 1, 1, 0, 1,
            -1, 1, -1, 1, 0, 1, 0, 1, 0, 0,
            -1, -1, -1, 1, 0, 0, 0, 1, 1, 0,
            -1, -1, 1, 1, 0, 0, 1, 1, 1, 1,
            -1, 1, -1, 1, 0, 1, 0, 1, 0, 0,
        
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            -1, 1, 1, 1, 0, 1, 1, 1, 0, 1,
            -1, -1, 1, 1, 0, 0, 1, 1, 0, 0,
            -1, -1, 1, 1, 0, 0, 1, 1, 0, 0,
            1, -1, 1, 1, 1, 0, 1, 1, 1, 0,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        
            1, -1, -1, 1, 1, 0, 0, 1, 1, 1,
            -1, -1, -1, 1, 0, 0, 0, 1, 0, 1,
            -1, 1, -1, 1, 0, 1, 0, 1, 0, 0,
            1, 1, -1, 1, 1, 1, 0, 1, 1, 0,
            1, -1, -1, 1, 1, 0, 0, 1, 1, 1,
            -1, 1, -1, 1, 0, 1, 0, 1, 0, 0,
        ]);
    }

}

